[gd_scene load_steps=9 format=3 uid="uid://lxqi0v2muri5"]

[ext_resource type="ArrayMesh" uid="uid://bsbffbg7n2mm3" path="res://art/fish.obj" id="1_fjsbh"]
[ext_resource type="Script" path="res://fish_skeleton.gd" id="1_w60ch"]
[ext_resource type="Texture2D" uid="uid://dse8im357fa6s" path="res://art/fish_texture.png" id="3_621ro"]

[sub_resource type="Shader" id="Shader_qjbab"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform float time_scale = 3;
uniform float side_to_side = 0.5;
uniform float pivot = 2.0;
uniform float wave = 0.2;
uniform float twist = 0.1;
uniform float mask_black = 0.5;
uniform float mask_white = 0.6;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	float body = (VERTEX.z + 1.0) / 2.0; //for a fish centered at (0, 0) with a length of 2
	float time = TIME * time_scale;
	VERTEX.x += cos(time) * side_to_side;
	//wave is a uniform float
	VERTEX.x += cos(time + body) * wave;
	//angle is scaled by 0.1 so that the fish only pivots and doesn't rotate all the way around
	//pivot is a uniform float
	float pivot_angle = cos(time) * 0.1 * pivot;
	mat2 rotation_matrix = mat2(
		vec2(cos(pivot_angle), -sin(pivot_angle)), 
		vec2(sin(pivot_angle), cos(pivot_angle))
	);
	VERTEX.xz = rotation_matrix * VERTEX.xz;
	//twist is a uniform float
	float twist_angle = cos(time + body) * 0.3 * twist;
	mat2 twist_matrix = mat2(
		vec2(cos(twist_angle), -sin(twist_angle)), 
		vec2(sin(twist_angle), cos(twist_angle))
	);
	
	VERTEX.xy = twist_matrix * VERTEX.xy;
	//mask_black and mask_white are uniforms
	float mask = smoothstep(mask_black, mask_white, 1.0 - body);
	//wave motion with mask
	VERTEX.x += cos(time + body) * mask * wave;
	//twist motion with mask
	VERTEX.xy = mix(VERTEX.xy, twist_matrix * VERTEX.xy, mask);
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_pphtq"]
render_priority = 0
shader = SubResource("Shader_qjbab")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/time_scale = 3.0
shader_parameter/side_to_side = 0.5
shader_parameter/pivot = 2.0
shader_parameter/wave = 0.2
shader_parameter/twist = 0.1
shader_parameter/mask_black = 0.5
shader_parameter/mask_white = 0.6
shader_parameter/texture_albedo = ExtResource("3_621ro")

[sub_resource type="MultiMesh" id="MultiMesh_6683g"]
transform_format = 1
instance_count = 128
mesh = ExtResource("1_fjsbh")
buffer = PackedFloat32Array(0, 1.001, 0, 0.0831831, -0.651397, 0, -0.760055, -0.350931, -0.760055, 0, 0.651397, 1.51539, 0, 1.001, 0, -0.0148168, -0.961858, 0, 0.277184, 0.582763, 0.277184, 0, 0.961858, -0.695142, 0.00107802, -1.00003, -0.0440441, -0.106232, 0.799753, 0.0273482, -0.601373, -0.168517, 0.601993, -0.0345415, 0.799007, -2.04349, -0.00758137, 1.00096, 0.00472379, 0.098276, 0.529355, 2.33063e-09, 0.849579, 0.0408187, 0.849545, 0.00893261, -0.529334, 1.7204, 0, 1.001, 0, 0.0985832, 0.75712, 0, -0.654806, 0.0585897, -0.654806, 0, -0.75712, 0.739739, -0.134966, -0.99186, 0, -0.12999, -0.984296, 0.133937, -0.123382, 0.381721, 0.122255, -0.0166357, -0.993367, -0.210753, 0.00673424, 1.00096, 0.00586869, 0.0980602, 0.657653, 1.86451e-09, -0.754648, -0.230945, -0.754618, 0.00893261, -0.657627, 1.74459, -0.762024, 0.649092, 0, 0.0273663, -0.648097, -0.760857, 0.0553927, -0.473199, 0.035919, 0.0421684, 0.999466, 0.905475, 0, -1.001, 0, -0.137517, -0.835766, 0, 0.550906, 0.144435, -0.550906, 0, -0.835766, -0.720686, 0, 1.001, 0, 0.0985832, 0.993367, 0, -0.123382, 0.211998, -0.123382, 0, -0.993367, -0.143347, -0.0247866, 0.99008, 0.145356, 0.076734, -0.00363784, 0.14531, -0.99039, 0.486886, -1.00069, -0.0250522, 0, -0.177142, -0.842023, 0.541293, 0, 0.0169772, -0.533715, -0.830234, -0.166917, -0.417564, -0.0902606, -0.140407, 0.986985, -0.652476, 0.131562, -0.989371, -0.0764101, -0.11879, -0.849751, -0.152131, 0.506735, -0.341938, -0.51246, -0.00173553, -0.859874, 1.34733, 0, 1.001, 0, 0.0985832, 0, 0, 1.001, 0.0942528, 1.001, 0, 0, 1.64024, 0.0550959, 0.999483, 0, 0.0637867, 0, 0, 1.001, 0.131626, 0.999483, -0.0550959, 0, -2.04476, -0.00588486, 0.991474, 0.137642, 0.0734058, 0.000816957, -0.13764, 0.991492, -0.400959, 1.00098, 0.0059413, 0, 1.07773, -0.769115, 0.598573, -0.228417, 0.0470266, 0.613878, 0.790652, 0.00490392, 0.531441, 0.18335, -0.136312, -0.974578, -0.31793, -0.0304988, 1.00054, 0, 0.0925062, 0, 0, 1.001, -0.0653136, 1.00054, 0.0304988, 0, 2.00423, 0.128385, 0.972141, 0.201146, 0.0706718, 0.0263355, 0.199414, -0.980582, 0.164381, -0.992383, 0.131059, 0, 2.08068, 0.791533, 0.427136, -0.439353, 0.0220194, 0.254577, -0.882079, -0.398908, -0.389158, -0.557375, 0.203696, -0.806128, 2.13133, 0.17002, 0.986455, 0, 0.0985488, -0.975959, 0.168211, 0.145639, 0.277666, 0.143523, -0.0247369, 0.990349, -0.560783, 0.771675, 0.586872, -0.2492, 0.00995412, 0.53606, -0.809005, -0.245258, -0.457143, -0.345194, 0.0556176, -0.937949, 1.452, 0, 1.001, 0, 0.0985832, 0, 0, 1.001, 0.152889, 1.001, 0, 0, 0.286711, 0.400049, -0.866563, -0.301712, -0.0818005, 0.866737, 0.248823, 0.434575, -0.45619, -0.301213, -0.434921, 0.849774, -2.39798, 0, 1.001, 0, 0.0985832, -1.00095, 0, 0.0101191, -0.0563443, 0.0101191, 0, 1.00095, 0.0972281, -0.133378, -0.990007, -0.0640098, -0.123131, -0.805986, 0.145792, -0.575441, 0.423562, 0.578445, -0.0251352, -0.81656, -0.247546, 0.133919, 0.992001, 0, 0.0940944, -0.988927, 0.133504, 0.0787446, 0.393771, 0.0780367, -0.0105349, 0.997898, 0.0832205, -0.065237, 0.622449, -0.781219, 0.0545828, -0.0814313, 0.776963, 0.625858, 0.574214, 0.995547, 0.10434, 0, 1.1173, -0.119783, -0.992703, 0.0468478, -0.0936731, -0.792313, 0.123875, 0.599079, 0.500463, -0.599911, 0.0346066, -0.800569, -2.32213, 0, -1.001, 0, -0.137517, 0, 0, 1.001, 0.182572, -1.001, 0, 0, 0.541068, -0.133962, -0.991996, 0, -0.119826, 0.991945, -0.133955, 0.0101191, -0.358619, -0.0100281, 0.00135422, 1.00095, 0.0558912, 0.0114834, -1.00014, 0.0398591, -0.123399, 0.961877, -1.86451e-09, -0.277117, -0.0556581, 0.276879, 0.0414803, 0.961051, 2.1919, 0, -1.001, 0, -0.137517, 0, 0, 1.001, 0.321039, -1.001, 0, 0, 0.461805, 0.0435201, -0.98969, -0.1436, -0.0937798, -0.00630849, 0.143461, -0.990646, 0.433619, 1.00003, 0.043975, 0, -2.05288, 0, 1.001, 0, 0.0985832, -1.00099, 0, 0.00506762, -0.0779256, 0.00506762, 0, 1.00099, 0.881581, 0.0183653, -0.991258, -0.1381, -0.120685, -0.00255817, 0.138076, -0.991428, 0.47271, 1.00083, 0.0185426, 0, 1.10407, -0.0347702, -1.00009, -0.0246407, -0.126836, -0.57878, 0, 0.81671, 0.0435342, -0.815969, 0.0426161, -0.578255, 2.11014, 0, -1.001, 0, -0.137517, 0.997898, 0, 0.0787446, 0.266458, -0.0787446, 0, 0.997898, 0.178208, 0, -1.001, 0, -0.137517, -0.762722, 0, 0.648271, 0.258889, -0.648271, 0, -0.762722, 0.697718, 0, -1.001, 0, -0.137517, 0.648988, 0, -0.762113, -0.149785, 0.762113, 0, 0.648988, 1.56921, -0.760046, 0.547193, -0.353426, 0.064409, -0.508487, -0.837831, -0.203669, -0.415791, -0.407151, 0.0248897, 0.914117, 1.49619, 0, 1.001, 0, 0.0985832, 0.762722, 0, 0.648271, 0.233832, 0.648271, 0, -0.762722, 0.543787, 0, 1.001, 0, 0.0985832, 0.762722, 0, 0.648271, 0.326919, 0.648271, 0, -0.762722, 0.416372, 0, -1.001, 0, -0.137517, -0.856724, 0, -0.517711, -0.0419151, 0.517711, 0, -0.856724, -0.876808, 0.0426161, 1.00009, 0, 0.0921319, 0, 0, -1.001, -0.208675, -1.00009, 0.0426161, 0, 2.01323, 0.169807, 0.584228, -0.794887, 0.0184678, -0.221854, -0.763299, -0.608405, -0.314653, -0.961222, 0.279381, 0, -1.87695, 0, 1.001, 0, 0.0985832, 0.75712, 0, -0.654806, -0.0402693, -0.654806, 0, -0.75712, 0.725799, -0.0126959, 1.00082, 0.014065, 0.0700786, 0.743055, 9.32254e-10, 0.670724, 0.185233, 0.670604, 0.0189476, -0.742922, -1.82384, 0, 1.001, 0, 0.0985832, 0, 0, -1.001, -0.116327, -1.001, 0, 0, -0.224484, -0.783923, -0.575931, 0.236155, -0.0825315, -0.464228, 0.793924, 0.395193, 0.518173, -0.414679, 0.199971, -0.88885, 1.3965, 0.803568, 0.520019, -0.293018, 0.00731621, 0.579422, -0.797603, 0.173493, -0.378108, -0.143349, -0.308885, -0.941298, -0.793913, 0.78114, -0.576511, 0.243837, -0.0766912, 0.622917, 0.754324, -0.212065, 0.484118, -0.0616122, 0.317225, 0.947403, -2.01292, 0, -1.001, 0, -0.137517, 0, 0, -1.001, -0.167042, 1.001, 0, 0, -0.344439, 0.113005, -0.992506, -0.0645275, -0.13031, 0.810405, 0.129533, -0.57312, 0.422522, 0.576606, 0.0124597, 0.818151, 0.935791, 0, 1.001, 0, 0.0985832, -0.813862, 0, -0.582777, -0.0523183, -0.582777, 0, 0.813862, -0.457316, 0, 1.001, 0, -0.110417, -0.6513, 0, -0.760138, -0.51356, -0.760138, 0, 0.6513, 0.489833, 0, -1.001, 0, -0.137517, 0.813862, 0, -0.582777, -0.0619273, 0.582777, 0, 0.813862, -0.6263, -0.00150594, 1, 0.04468, 0.0582729, -0.811298, -0.0273908, 0.585701, 0.115142, 0.586339, -0.0353314, 0.81053, -2.15767, 0, -1.001, 0, -0.137517, 0.996401, 0, -0.0958435, 0.287771, 0.0958435, 0, 0.996401, 0.82978, -0.133378, -0.990007, -0.0640098, -0.118371, -0.805986, 0.145792, -0.575441, 0.464648, 0.578445, -0.0251352, -0.81656, -0.196734, 0, 1.001, 0, 0.0985832, -0.781284, 0, -0.625777, 0.00737326, -0.625777, 0, 0.781284, 0.973035, 0, 1.001, 0, -0.0148168, 0.583275, 0, 0.813506, 0.647949, 0.813506, 0, -0.583275, 0.389192, -0.0808429, 0.997723, -0.00375479, 0.0634771, 0.31199, 0.0217012, -0.95089, -0.231939, -0.947696, -0.0779663, -0.312721, -2.17404, 0.156022, -0.983218, -0.104593, -0.0990001, -0.941191, -0.180132, 0.289331, -0.172683, -0.303013, 0.0532463, -0.952549, -1.78785, 0.112434, -0.43872, 0.892684, -0.102693, -0.221612, 0.864738, 0.452898, 0.38423, -0.969664, -0.248502, 0, -0.865446, 0, 1.001, 0, -0.0148168, 0.673874, 0, 0.740199, 0.615518, 0.740199, 0, -0.673874, -0.0280091, -0.948636, 0.319518, 0, 0.0168966, -0.319517, -0.948635, -0.00111845, -0.164783, -0.000357008, -0.00105994, 1.001, -1.38431, 0.0518086, 0.650582, -0.758986, 0.0495928, 0.0602505, 0.756591, 0.652642, 0.622169, 0.997841, -0.0794622, 0, 0.317398, -0.129545, -0.992582, 0, -0.129265, 0.99257, -0.129543, 0.00506761, -0.281613, -0.005025, 0.000655826, 1.00099, 0.968561, -0.152339, -0.98934, 0, -0.135519, 0.987961, -0.152127, -0.0528405, -0.238988, 0.052225, -0.00804163, 0.999604, 1.54405, 0, -1.001, 0, -0.137517, 0, 0, 1.001, 0.0697031, -1.001, 0, 0, -0.895284, 0, 1.001, 0, 0.0985832, 0.793276, 0, -0.610503, -0.142012, -0.610503, 0, -0.793276, -0.0822753, 0, 1.001, 0, 0.0985832, 0.762722, 0, 0.648271, 0.212014, 0.648271, 0, -0.762722, 0.402622, 0, 1.001, 0, 0.0985832, 0, 0, 1.001, 0.123581, 1.001, 0, 0, 0.272337, -0.00181107, -0.652639, 0.758986, -0.102115, 0.00210618, 0.758983, 0.652642, 0.617329, -1.001, 0.00277776, 0, 0.683108, -0.110347, 0.992638, 0.0670391, 0.076154, -0.845706, -0.129113, 0.519724, -0.391553, 0.524029, 0.000653652, 0.852874, 0.824899, -0.970016, 0.247122, 0, 0.0311655, 0.216682, 0.850532, 0.481296, 0.0475748, 0.11882, 0.466399, -0.877699, 2.42516, 0, -1.001, 0, -0.137517, 0.763795, 0, 0.647007, 0.0589425, -0.647007, 0, 0.763795, 1.58396, 0.129699, 0.992562, 0, 0.0832976, -0.988002, 0.129103, -0.0958435, 0.50258, -0.0950356, 0.0124184, 0.996401, 0.751146, 0, 1.001, 0, -0.122917, 0.582828, 0, 0.813826, -0.658127, 0.813826, 0, -0.582828, 1.24701, 0.773073, -0.594605, 0.225398, -0.0829324, 0.494938, 0.785411, 0.374389, 0.491686, -0.399244, -0.177695, 0.900572, -0.508749, -0.00588486, 0.991474, 0.137642, 0.0693531, 0.000816957, -0.13764, 0.991492, -0.443406, 1.00098, 0.0059413, 0, 0.770691, -0.750258, 0.31099, -0.58515, 0.0393206, 0.381526, 0.925436, 0.00266264, 0.269634, 0.541805, -0.221031, -0.812154, -1.28933, 0, 1.001, 0, -0.0148168, -0.990236, 0, 0.1464, 0.947215, 0.1464, 0, 0.990236, 0.268716, 0.0267999, 1.00011, -0.032518, 0.0801512, -0.772465, 3.72902e-09, -0.636631, -0.193908, -0.636066, 0.0421385, 0.77178, 2.29602, 0.0313901, 1.00009, 0.0288235, 0.0879543, 0.677029, -3.72902e-09, -0.737315, -0.248113, -0.736646, 0.0426161, -0.676415, 2.11127, 0, 1.001, 0, -0.0148168, -0.922345, 0, 0.388948, 0.528908, 0.388948, 0, 0.922345, -0.845654, 0, 1.001, 0, -0.0148168, -0.961845, 0, 0.277228, 0.890545, 0.277228, 0, 0.961845, 0.358193, 0.15164, 0.989448, 0, 0.07788, 0.989383, -0.15163, 0.0114187, -0.356141, 0.0112869, -0.00172979, -1.00093, 1.42591, 0, 1.001, 0, -0.110417, 0.0096347, 0, -1.00095, -0.546265, -1.00095, 0, -0.0096347, 0.523307, -0.0670371, -0.997661, 0.0466961, -0.0966926, -0.77098, 0.021941, -0.638052, -0.328383, 0.634899, -0.0786962, -0.769877, -2.27319, 0.197584, 0.53035, -0.825646, 0.0270093, -0.330094, -0.757215, -0.565388, -0.46227, -0.924121, 0.383869, 0.0254265, -2.24368, 0.0123002, 1.00082, 0.0144124, 0.0702832, 0.761406, -1.86451e-09, -0.649817, -0.10678, -0.649701, 0.0189476, -0.761269, -1.83465, -0.00752936, 0.967572, 0.256414, 0.0742487, -0.739886, -0.178085, 0.650273, -0.139629, 0.674176, -0.184637, 0.716518, -1.58869, -0.127155, -0.972239, -0.201452, -0.109775, -0.899724, 0.198721, -0.391162, 0.17628, 0.419916, 0.131382, -0.899117, 2.06081, 0, 1.001, 0, -0.110417, 0.582669, 0, 0.81394, -0.638548, 0.81394, 0, -0.582669, 0.279292, 0.773766, -0.635049, 0, -0.0868097, 0.631001, 0.768834, 0.112841, 0.601516, -0.0715878, -0.0872252, 0.99462, 0.108612, 0.154943, 0.987507, 0.053146, 0.0419866, 0.985187, -0.158812, 0.0786562, -0.461061, 0.0860277, 0.0401314, -0.996489, -2.32799, 0, 1.001, 0, 0.0985832, 0.797253, 0, -0.6053, -0.101109, -0.6053, 0, -0.797253, 1.42413, 0, 1.001, 0, -0.0148168, -0.990236, 0, 0.1464, 0.905257, 0.1464, 0, 0.990236, 0.366311, 0.13042, 0.989588, 0.0755463, 0.0464004, -0.671278, 0.144079, -0.728442, 0.507836, -0.731011, 0.0442465, 0.682398, -2.10479, 0.000465215, 0.992761, 0.128168, 0.0725785, 6.00606e-05, 0.128168, -0.992761, 0.586022, -1.001, 0.000469076, 0, 0.476552, 0.773766, -0.635049, 0, -0.0395216, 0.631001, 0.768834, 0.112841, 0.658171, -0.0715878, -0.0872252, 0.99462, 0.263705, 0, -1.001, 0, -0.137517, 0, 0, -1.001, -0.0673802, 1.001, 0, 0, -0.359406, 0.107256, 0.594605, -0.798086, 0.0364813, 0.141674, 0.785411, 0.604201, 0.53515, 0.985102, -0.177695, 0, -0.342129, 0.773225, -0.524446, 0.359278, -0.0481252, 0.589725, 0.803002, -0.0970252, 0.465954, -0.237379, 0.286611, 0.929251, 1.61845, -0.771863, 0.63736, 0, 3.25581e-05, -0.63717, -0.771633, -0.0244485, -0.505992, -0.0155669, -0.018852, 1.0007, 0.11747, 0, 1.001, 0, 0.0985832, 0, 0, -1.001, 0.000796236, -1.001, 0, 0, -0.0771359, 0.394186, 0.920111, -0.00382241, 0.043565, 0.311813, -0.12967, 0.942316, 0.300658, 0.865674, -0.372267, -0.337679, -2.29788, 0.853525, -0.433172, 0.293018, -0.0395534, -0.492873, -0.853802, 0.173493, -0.318338, 0.174852, -0.292209, -0.941298, -0.965398, -0.774838, 0.633741, 0, 0.00933201, -0.58229, -0.711932, 0.395084, -0.429572, 0.250131, 0.30582, 0.919734, -2.14045, -0.0095274, -1.00095, 0, -0.137286, 0, 0, 1.001, 0.139172, -1.00095, 0.0095274, 0, 1.71018, -0.0326252, -0.989782, -0.145838, -0.124345, 0.00480449, 0.145758, -0.990319, 0.372658, 1.00046, -0.032977, 0, -0.45818, -0.108579, 0.992638, 0.0698628, 0.0787241, 0.834158, 0.129113, -0.538062, 0.537973, -0.542579, -0.000145391, -0.841195, 0.743056, -0.130203, 0.989115, 0.0818586, 0.0897811, 0.915462, 0.151579, -0.37544, 0.378865, -0.383377, 0.0260291, -0.924308, 1.28571, 0.871532, -0.318949, 0.375107, -0.0597928, 0.389793, 0.912853, -0.129467, 0.303102, -0.300824, 0.25879, 0.918985, -1.52746, 0, 1.001, 0, 0.00138307, -0.735651, 0, -0.678836, -0.358084, -0.678836, 0, 0.735651, -1.25907, -0.0326252, -0.989782, -0.145838, -0.12263, 0.00480449, 0.145758, -0.990319, 0.379117, 1.00046, -0.032977, 0, -0.481084, -0.742877, -0.630842, 0.228417, -0.0358489, -0.647052, 0.763741, 0.00490392, 0.611324, -0.177368, -0.144011, -0.974578, -0.0909773, 0.0114834, -1.00014, 0.0398591, -0.122299, 0.961877, 0, -0.277117, -0.0442266, 0.276879, 0.0414803, 0.961051, 2.21843, 0.876815, -0.404119, 0.264358, -0.0543603, -0.403315, -0.311456, 0.861587, 0.608774, -0.265582, -0.861211, -0.435641, -2.46766, 0, 1.001, 0, -0.0148168, 0.583275, 0, 0.813506, 0.67384, 0.813506, 0, -0.583275, 0.365786, 0, 1.001, 0, 0.0985832, 0, 0, -1.001, 0.0187639, -1.001, 0, 0, 1.14694, 0.121461, -0.346793, 0.931119, -0.091268, 0.307783, -0.878779, -0.367448, -0.325135, 0.944732, 0.330883, 0, 2.26788, 0.152334, -0.986061, -0.0804982, -0.135985, -0.758816, -0.168713, 0.630662, -0.176496, -0.634817, -0.0349531, -0.773166, -0.86786, -0.00229782, -0.992703, -0.128595, -0.111919, -0.00029766, -0.128595, 0.992706, -0.418404, -1.001, 0.00231702, 0, 0.582266, -0.110347, 0.992638, 0.0670391, 0.08831, -0.845706, -0.129113, 0.519724, -0.298025, 0.524029, 0.000653652, 0.852874, 0.838875, 0.123064, 0.991323, 0.0643107, 0.0697566, -0.809065, 0.137619, -0.573128, 0.573335, -0.576429, 0.0184812, 0.818162, 1.00122)

[sub_resource type="Shader" id="Shader_d3rvo"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


uniform float time_scale = 3;
uniform float side_to_side = 0.5;
uniform float pivot = 2.0;
uniform float wave = 0.2;
uniform float twist = 0.1;
uniform float mask_black = 0.5;
uniform float mask_white = 0.6;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	float body = (VERTEX.z + 1.0) / 2.0; //for a fish centered at (0, 0) with a length of 2
	float time = TIME * time_scale;
	VERTEX.x += cos(time) * side_to_side;
	//wave is a uniform float
	VERTEX.x += cos(time + body) * wave;
	//angle is scaled by 0.1 so that the fish only pivots and doesn't rotate all the way around
	//pivot is a uniform float
	float pivot_angle = cos(time) * 0.1 * pivot;
	mat2 rotation_matrix = mat2(
		vec2(cos(pivot_angle), -sin(pivot_angle)), 
		vec2(sin(pivot_angle), cos(pivot_angle))
	);
	VERTEX.xz = rotation_matrix * VERTEX.xz;
	//twist is a uniform float
	float twist_angle = cos(time + body) * 0.3 * twist;
	mat2 twist_matrix = mat2(
		vec2(cos(twist_angle), -sin(twist_angle)), 
		vec2(sin(twist_angle), cos(twist_angle))
	);
	
	VERTEX.xy = twist_matrix * VERTEX.xy;
	//mask_black and mask_white are uniforms
	float mask = smoothstep(mask_black, mask_white, 1.0 - body);
	//wave motion with mask
	VERTEX.x += cos(time + body) * mask * wave;
	//twist motion with mask
	VERTEX.xy = mix(VERTEX.xy, twist_matrix * VERTEX.xy, mask);
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lr03x"]
render_priority = 0
shader = SubResource("Shader_d3rvo")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/time_scale = 3.0
shader_parameter/side_to_side = 0.5
shader_parameter/pivot = 2.0
shader_parameter/wave = 0.2
shader_parameter/twist = 0.1
shader_parameter/mask_black = 0.5
shader_parameter/mask_white = 0.6
shader_parameter/texture_albedo = ExtResource("3_621ro")

[node name="Spatial" type="Node3D"]
script = ExtResource("1_w60ch")

[node name="School" type="MultiMeshInstance3D" parent="."]
material_override = SubResource("ShaderMaterial_pphtq")
multimesh = SubResource("MultiMesh_6683g")

[node name="FishMesh" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.57058, 0, -0.64692)
material_override = SubResource("ShaderMaterial_lr03x")
mesh = ExtResource("1_fjsbh")
skeleton = NodePath("")
