[gd_scene load_steps=5 format=3 uid="uid://bswl3y6551aih"]

[ext_resource type="Texture2D" uid="uid://dse8im357fa6s" path="res://art/fish_texture.png" id="1_d2utd"]
[ext_resource type="ArrayMesh" uid="uid://bsbffbg7n2mm3" path="res://art/fish.obj" id="2_60dvy"]

[sub_resource type="Shader" id="Shader_p55km"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


uniform float time_scale = 3;
uniform float side_to_side = 0.5;
uniform float pivot = 2.0;
uniform float wave = 0.2;
uniform float twist = 0.1;
uniform float mask_black = 0.5;
uniform float mask_white = 0.6;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	float body = (VERTEX.z + 1.0) / 2.0; //for a fish centered at (0, 0) with a length of 2
	float time = TIME * time_scale;
	VERTEX.x += cos(time) * side_to_side;
	//wave is a uniform float
	VERTEX.x += cos(time + body) * wave;
	//angle is scaled by 0.1 so that the fish only pivots and doesn't rotate all the way around
	//pivot is a uniform float
	float pivot_angle = cos(time) * 0.1 * pivot;
	mat2 rotation_matrix = mat2(
		vec2(cos(pivot_angle), -sin(pivot_angle)), 
		vec2(sin(pivot_angle), cos(pivot_angle))
	);
	VERTEX.xz = rotation_matrix * VERTEX.xz;
	//twist is a uniform float
	float twist_angle = cos(time + body) * 0.3 * twist;
	mat2 twist_matrix = mat2(
		vec2(cos(twist_angle), -sin(twist_angle)), 
		vec2(sin(twist_angle), cos(twist_angle))
	);
	
	VERTEX.xy = twist_matrix * VERTEX.xy;
	//mask_black and mask_white are uniforms
	float mask = smoothstep(mask_black, mask_white, 1.0 - body);
	//wave motion with mask
	VERTEX.x += cos(time + body) * mask * wave;
	//twist motion with mask
	VERTEX.xy = mix(VERTEX.xy, twist_matrix * VERTEX.xy, mask);
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_go2d8"]
render_priority = 0
shader = SubResource("Shader_p55km")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/time_scale = 3.0
shader_parameter/side_to_side = 0.5
shader_parameter/pivot = 2.0
shader_parameter/wave = 0.2
shader_parameter/twist = 0.1
shader_parameter/mask_black = 0.5
shader_parameter/mask_white = 0.6
shader_parameter/texture_albedo = ExtResource("1_d2utd")

[node name="RigidBody3D" type="RigidBody3D"]

[node name="FishMesh" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.57058, 0, -0.64692)
material_override = SubResource("ShaderMaterial_go2d8")
mesh = ExtResource("2_60dvy")
skeleton = NodePath("")
